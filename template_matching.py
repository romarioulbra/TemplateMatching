# -*- coding: utf-8 -*-
"""Template matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NziQYwF3xqIwPSwBvviJwEEwbnzwb0av
"""

# Instalar depend√™ncias adicionais se necess√°rio
# !pip install scikit-image plotly seaborn

import numpy as np
import matplotlib.pyplot as plt
from skimage import data, io, feature, measure, filters, morphology, segmentation
from skimage.feature import match_template, peak_local_max
from skimage.io import imread
from skimage.transform import rotate, rescale
import cv2
from google.colab import files
import pandas as pd
import seaborn as sns
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px
from scipy import ndimage as ndi
import os
import glob

print("=== Template Matching Avan√ßado com An√°lise de Informa√ß√µes ===")

class AdvancedTemplateAnalyzer:
    def __init__(self):
        self.results = {}
        self.metrics = {}

    def load_images(self, image, template):
        """Carrega e pr√©-processa as imagens"""
        # Converter para escala de cinza se necess√°rio
        if len(image.shape) == 3:
            self.image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        else:
            self.image = image

        if len(template.shape) == 3:
            self.template = cv2.cvtColor(template, cv2.COLOR_RGB2GRAY)
        else:
            self.template = template

        self.results['image_shape'] = self.image.shape
        self.results['template_shape'] = self.template.shape

    def perform_template_matching(self, method='correlation'):
        """Realiza template matching com diferentes m√©todos"""
        # M√©todo principal - correla√ß√£o normalizada
        self.correlation_map = match_template(self.image, self.template)

        # Encontrar picos de correla√ß√£o
        self.peaks = peak_local_max(
            self.correlation_map,
            min_distance=10,
            threshold_abs=0.5,
            num_peaks=10
        )

        self.results['correlation_map'] = self.correlation_map
        self.results['peaks'] = self.peaks
        self.results['max_correlation'] = np.max(self.correlation_map)
        self.results['min_correlation'] = np.min(self.correlation_map)
        self.results['mean_correlation'] = np.mean(self.correlation_map)

    def calculate_similarity_metrics(self):
        """Calcula m√©tricas de similaridade avan√ßadas"""
        from skimage.metrics import structural_similarity as ssim
        from skimage.metrics import mean_squared_error

        # Encontrar a melhor correspond√™ncia
        best_match_idx = np.unravel_index(
            np.argmax(self.correlation_map),
            self.correlation_map.shape
        )
        y, x = best_match_idx

        # Extrair regi√£o correspondente
        h, w = self.template.shape
        matched_region = self.image[y:y+h, x:x+w]

        # M√©tricas de similaridade
        self.metrics['SSIM'] = ssim(self.template, matched_region, data_range=matched_region.max() - matched_region.min())
        self.metrics['MSE'] = mean_squared_error(self.template, matched_region)
        self.metrics['NCC'] = self.correlation_map[best_match_idx]  # Normalized Cross Correlation

        # An√°lise de histograma
        self.metrics['template_hist'] = np.histogram(self.template, bins=50)[0]
        self.metrics['matched_hist'] = np.histogram(matched_region, bins=50)[0]

    def analyze_texture_features(self):
        """Analisa caracter√≠sticas de textura"""
        # Histogram of Oriented Gradients (HOG)
        hog_template, hog_image_template = feature.hog(
            self.template,
            orientations=8,
            pixels_per_cell=(16, 16),
            cells_per_block=(1, 1),
            visualize=True
        )

        # Local Binary Patterns
        lbp_template = feature.local_binary_pattern(self.template, 24, 3, method='uniform')

        self.results['hog_features'] = hog_template
        self.results['hog_image_template'] = hog_image_template
        self.results['lbp_template'] = lbp_template

    def detect_multiple_occurrences(self, threshold=0.7):
        """Detecta m√∫ltiplas ocorr√™ncias do template"""
        binary_correlation = self.correlation_map > threshold
        labeled_array, num_features = ndi.label(binary_correlation)

        # Propriedades das regi√µes
        regions = measure.regionprops(labeled_array, intensity_image=self.correlation_map)

        occurrences = []
        for region in regions:
            y, x = region.centroid
            occurrences.append({
                'centroid': (x, y),
                'area': region.area,
                'max_intensity': region.max_intensity,
                'bbox': region.bbox
            })

        self.results['occurrences'] = occurrences
        self.results['num_detections'] = len(occurrences)

    def create_confidence_heatmap(self):
        """Cria mapa de calor de confian√ßa"""
        fig = px.imshow(
            self.correlation_map,
            title='Mapa de Confian√ßa - Correla√ß√£o',
            color_continuous_scale='viridis',
            aspect='auto'
        )
        fig.update_layout(coloraxis_colorbar=dict(title="Correla√ß√£o"))
        return fig

    def generate_detection_report(self):
        """Gera relat√≥rio detalhado das detec√ß√µes"""
        report = {
            'Estat√≠sticas Gerais': {
                'Dimens√µes da Imagem': self.results['image_shape'],
                'Dimens√µes do Template': self.results['template_shape'],
                'Correla√ß√£o M√°xima': f"{self.results['max_correlation']:.4f}",
                'Correla√ß√£o M√©dia': f"{self.results['mean_correlation']:.4f}",
                'N√∫mero de Detec√ß√µes': self.results['num_detections']
            },
            'M√©tricas de Similaridade': self.metrics,
            'Detec√ß√µes Encontradas': self.results['occurrences']
        }
        return report

# Fun√ß√£o para buscar e carregar imagens da pasta template_test_images
def carregar_imagens_da_pasta():
    """Busca e carrega automaticamente imagens da pasta template_test_images"""
    pasta = 'template_test_images'

    if not os.path.exists(pasta):
        print(f"‚ùå Pasta '{pasta}' n√£o encontrada!")
        print("Por favor, execute primeiro o gerador de imagens.")
        return None, None

    # Buscar todos os arquivos de imagem na pasta
    arquivos = glob.glob(os.path.join(pasta, '*.png')) + glob.glob(os.path.join(pasta, '*.jpg'))

    if not arquivos:
        print(f"‚ùå Nenhuma imagem encontrada na pasta '{pasta}'!")
        return None, None

    print(f"üìÅ Encontradas {len(arquivos)} imagens na pasta '{pasta}':")
    for i, arquivo in enumerate(arquivos):
        print(f"   {i+1}. {os.path.basename(arquivo)}")

    # Tentar identificar automaticamente imagem principal e template
    imagem_principal = None
    template = None

    # Estrat√©gia 1: Buscar por nomes espec√≠ficos
    for arquivo in arquivos:
        nome = os.path.basename(arquivo).lower()
        if 'principal' in nome:
            imagem_principal = arquivo
        elif 'template' in nome:
            template = arquivo

    # Estrat√©gia 2: Se n√£o encontrou pelos nomes, usar os dois primeiros arquivos
    if imagem_principal is None or template is None:
        if len(arquivos) >= 2:
            print("‚ö†Ô∏è  N√£o foi poss√≠vel identificar automaticamente pelos nomes.")
            print("   Usando os dois primeiros arquivos encontrados...")
            imagem_principal = arquivos[0]
            template = arquivos[1]
        else:
            print("‚ùå N√∫mero insuficiente de imagens para an√°lise.")
            return None, None

    # Carregar as imagens
    try:
        print(f"\nüì• Carregando imagens...")
        print(f"   Imagem principal: {os.path.basename(imagem_principal)}")
        print(f"   Template: {os.path.basename(template)}")

        img = imread(imagem_principal)
        tpl = imread(template)

        print(f"‚úÖ Imagens carregadas com sucesso!")
        print(f"   Dimens√µes da imagem: {img.shape}")
        print(f"   Dimens√µes do template: {tpl.shape}")

        return img, tpl

    except Exception as e:
        print(f"‚ùå Erro ao carregar imagens: {e}")
        return None, None

# Fun√ß√£o principal expandida
def analise_avancada_template_matching():
    print("=== AN√ÅLISE AVAN√áADA DE TEMPLATE MATCHING ===\n")

    # Inicializar analisador
    analyzer = AdvancedTemplateAnalyzer()

    # Carregar imagens de exemplo
    print("Carregando imagens...")
    image = data.coins()
    template = image[170:220, 75:130]

    analyzer.load_images(image, template)

    # Realizar an√°lises
    print("Realizando template matching...")
    analyzer.perform_template_matching()

    print("Calculando m√©tricas de similaridade...")
    analyzer.calculate_similarity_metrics()

    print("Analisando caracter√≠sticas de textura...")
    analyzer.analyze_texture_features()

    print("Detectando m√∫ltiplas ocorr√™ncias...")
    analyzer.detect_multiple_occurrences(threshold=0.6)

    # Visualiza√ß√µes
    print("\nGerando visualiza√ß√µes...")

    # Figura 1: Vis√£o geral
    fig1, axes = plt.subplots(2, 3, figsize=(18, 12))

    # Imagem original
    axes[0,0].imshow(image, cmap='gray')
    axes[0,0].set_title('Imagem Original')
    axes[0,0].set_axis_off()

    # Template
    axes[0,1].imshow(template, cmap='gray')
    axes[0,1].set_title('Template')
    axes[0,1].set_axis_off()

    # Mapa de correla√ß√£o
    im = axes[0,2].imshow(analyzer.correlation_map, cmap='hot')
    axes[0,2].set_title('Mapa de Correla√ß√£o')
    axes[0,2].set_axis_off()
    plt.colorbar(im, ax=axes[0,2])

    # Detec√ß√µes
    axes[1,0].imshow(image, cmap='gray')
    for occ in analyzer.results['occurrences']:
        x, y = occ['centroid']
        h, w = template.shape
        rect = plt.Rectangle((x-w/2, y-h/2), w, h,
                           edgecolor='red', facecolor='none', linewidth=2)
        axes[1,0].add_patch(rect)
        axes[1,0].plot(x, y, 'g+', markersize=10)
    axes[1,0].set_title(f'Detec√ß√µes: {len(analyzer.results["occurrences"])}')
    axes[1,0].set_axis_off()

    # HOG do template
    axes[1,1].imshow(analyzer.results['hog_image_template'], cmap='gray')
    axes[1,1].set_title('HOG - Template')
    axes[1,1].set_axis_off()

    # LBP do template
    axes[1,2].imshow(analyzer.results['lbp_template'], cmap='gray')
    axes[1,2].set_title('LBP - Template')
    axes[1,2].set_axis_off()

    plt.tight_layout()
    plt.show()

    # Figura 2: An√°lise estat√≠stica
    fig2, axes = plt.subplots(2, 2, figsize=(15, 10))

    # Histograma de correla√ß√µes
    axes[0,0].hist(analyzer.correlation_map.ravel(), bins=50, alpha=0.7)
    axes[0,0].axvline(analyzer.results['max_correlation'], color='red',
                     linestyle='--', label=f'Max: {analyzer.results["max_correlation"]:.3f}')
    axes[0,0].axvline(analyzer.results['mean_correlation'], color='green',
                     linestyle='--', label=f'M√©dia: {analyzer.results["mean_correlation"]:.3f}')
    axes[0,0].set_xlabel('Valor de Correla√ß√£o')
    axes[0,0].set_ylabel('Frequ√™ncia')
    axes[0,0].set_title('Distribui√ß√£o dos Valores de Correla√ß√£o')
    axes[0,0].legend()
    axes[0,0].grid(True, alpha=0.3)

    # Compara√ß√£o de histogramas
    axes[0,1].plot(analyzer.metrics['template_hist'], label='Template', alpha=0.7)
    axes[0,1].plot(analyzer.metrics['matched_hist'], label='Regi√£o Correspondente', alpha=0.7)
    axes[0,1].set_xlabel('Intensidade')
    axes[0,1].set_ylabel('Frequ√™ncia')
    axes[0,1].set_title('Compara√ß√£o de Histogramas')
    axes[0,1].legend()
    axes[0,1].grid(True, alpha=0.3)

    # Mapa de calor 3D (simplificado)
    y, x = np.mgrid[0:analyzer.correlation_map.shape[0], 0:analyzer.correlation_map.shape[1]]
    axes[1,0].contourf(x, y, analyzer.correlation_map, levels=50, cmap='viridis')
    axes[1,0].set_title('Mapa de Correla√ß√£o - Contorno')
    axes[1,0].set_xlabel('X')
    axes[1,0].set_ylabel('Y')

    # Distribui√ß√£o espacial das detec√ß√µes
    if analyzer.results['occurrences']:
        intensities = [occ['max_intensity'] for occ in analyzer.results['occurrences']]
        areas = [occ['area'] for occ in analyzer.results['occurrences']]
        axes[1,1].scatter(intensities, areas, alpha=0.6, s=100)
        axes[1,1].set_xlabel('Intensidade M√°xima')
        axes[1,1].set_ylabel('√Årea da Regi√£o')
        axes[1,1].set_title('Rela√ß√£o: Intensidade vs √Årea')
        axes[1,1].grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()

    # Relat√≥rio final
    print("\n" + "="*50)
    print("RELAT√ìRIO DE AN√ÅLISE")
    print("="*50)

    report = analyzer.generate_detection_report()

    for section, content in report.items():
        print(f"\n{section}:")
        print("-" * 30)
        if isinstance(content, dict):
            for key, value in content.items():
                if isinstance(value, dict):
                    print(f"  {key}:")
                    for subkey, subvalue in value.items():
                        print(f"    {subkey}: {subvalue}")
                else:
                    print(f"  {key}: {value}")
        else:
            print(content)

    # M√©tricas num√©ricas resumidas
    print(f"\nM√©tricas de Qualidade:")
    print(f"  SSIM: {analyzer.metrics['SSIM']:.4f}")
    print(f"  MSE: {analyzer.metrics['MSE']:.4f}")
    print(f"  NCC: {analyzer.metrics['NCC']:.4f}")

    return analyzer

# Fun√ß√£o para an√°lise com imagens da pasta template_test_images
def analise_com_imagens_da_pasta():
    """Permite an√°lise com imagens da pasta template_test_images"""
    print("\n=== AN√ÅLISE COM IMAGENS DA PASTA template_test_images ===")

    # Carregar imagens automaticamente da pasta
    image, template = carregar_imagens_da_pasta()

    if image is None or template is None:
        print("‚ùå N√£o foi poss√≠vel carregar as imagens. Voltando ao menu...")
        return None

    # Executar an√°lise
    analyzer = AdvancedTemplateAnalyzer()
    analyzer.load_images(image, template)
    analyzer.perform_template_matching()
    analyzer.calculate_similarity_metrics()
    analyzer.analyze_texture_features()
    analyzer.detect_multiple_occurrences(threshold=0.5)

    # Visualiza√ß√µes personalizadas para imagens da pasta
    print("\nGerando visualiza√ß√µes...")

    # Figura √∫nica com layout adaptado
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('An√°lise Template Matching - Imagens da Pasta', fontsize=16)

    # Imagem original
    axes[0,0].imshow(image, cmap='gray')
    axes[0,0].set_title('Imagem Principal')
    axes[0,0].set_axis_off()

    # Template
    axes[0,1].imshow(template, cmap='gray')
    axes[0,1].set_title('Template')
    axes[0,1].set_axis_off()

    # Mapa de correla√ß√£o
    im = axes[0,2].imshow(analyzer.correlation_map, cmap='hot')
    axes[0,2].set_title('Mapa de Correla√ß√£o')
    axes[0,2].set_axis_off()
    plt.colorbar(im, ax=axes[0,2])

    # Detec√ß√µes na imagem
    axes[1,0].imshow(image, cmap='gray')
    for occ in analyzer.results['occurrences']:
        x, y = occ['centroid']
        h, w = template.shape
        rect = plt.Rectangle((x-w/2, y-h/2), w, h,
                           edgecolor='red', facecolor='none', linewidth=2)
        axes[1,0].add_patch(rect)
        axes[1,0].plot(x, y, 'g+', markersize=10, markeredgewidth=2)
    axes[1,0].set_title(f'Detec√ß√µes: {len(analyzer.results["occurrences"])}')
    axes[1,0].set_axis_off()

    # HOG do template
    axes[1,1].imshow(analyzer.results['hog_image_template'], cmap='gray')
    axes[1,1].set_title('HOG - Template')
    axes[1,1].set_axis_off()

    # Distribui√ß√£o de correla√ß√µes
    axes[1,2].hist(analyzer.correlation_map.ravel(), bins=50, alpha=0.7, color='skyblue')
    axes[1,2].axvline(analyzer.results['max_correlation'], color='red',
                     linestyle='--', label=f'Max: {analyzer.results["max_correlation"]:.3f}')
    axes[1,2].axvline(analyzer.results['mean_correlation'], color='green',
                     linestyle='--', label=f'M√©dia: {analyzer.results["mean_correlation"]:.3f}')
    axes[1,2].set_xlabel('Valor de Correla√ß√£o')
    axes[1,2].set_ylabel('Frequ√™ncia')
    axes[1,2].set_title('Distribui√ß√£o de Correla√ß√µes')
    axes[1,2].legend()
    axes[1,2].grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()

    # Relat√≥rio simplificado
    print("\n" + "="*50)
    print("RELAT√ìRIO DE AN√ÅLISE - IMAGENS DA PASTA")
    print("="*50)

    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   ‚Ä¢ Dimens√µes da Imagem: {analyzer.results['image_shape']}")
    print(f"   ‚Ä¢ Dimens√µes do Template: {analyzer.results['template_shape']}")
    print(f"   ‚Ä¢ Correla√ß√£o M√°xima: {analyzer.results['max_correlation']:.4f}")
    print(f"   ‚Ä¢ N√∫mero de Detec√ß√µes: {analyzer.results['num_detections']}")

    print(f"\nüéØ M√âTRICAS DE QUALIDADE:")
    print(f"   ‚Ä¢ SSIM: {analyzer.metrics['SSIM']:.4f}")
    print(f"   ‚Ä¢ MSE: {analyzer.metrics['MSE']:.4f}")
    print(f"   ‚Ä¢ NCC: {analyzer.metrics['NCC']:.4f}")

    if analyzer.results['occurrences']:
        print(f"\nüìç DETEC√á√ïES ENCONTRADAS:")
        for i, occ in enumerate(analyzer.results['occurrences']):
            print(f"   {i+1}. Posi√ß√£o: ({occ['centroid'][0]:.1f}, {occ['centroid'][1]:.1f})")

    return analyzer

# Fun√ß√£o para upload manual (mantida para compatibilidade)
def analise_com_upload_manual():
    """Permite an√°lise com upload manual de imagens"""
    print("\n=== UPLOAD MANUAL DE IMAGENS ===")

    print("Fa√ßa upload da imagem principal:")
    uploaded_image = files.upload()
    image_file = list(uploaded_image.keys())[0]
    image = imread(image_file)

    print("Fa√ßa upload do template:")
    uploaded_template = files.upload()
    template_file = list(uploaded_template.keys())[0]
    template = imread(template_file)

    # Executar an√°lise
    analyzer = AdvancedTemplateAnalyzer()
    analyzer.load_images(image, template)
    analyzer.perform_template_matching()
    analyzer.calculate_similarity_metrics()
    analyzer.detect_multiple_occurrences(threshold=0.5)

    return analyzer

# Menu interativo atualizado
def menu_avancado():
    print("\nEscolha o tipo de an√°lise:")
    print("1 - An√°lise avan√ßada com imagens de exemplo")
    print("2 - An√°lise com imagens da pasta template_test_images")
    #print("3 - Upload manual de imagens personalizadas")

    opcao = input("Digite sua escolha: ")

    if opcao == '1':
        return analise_avancada_template_matching()
    elif opcao == '2':
        return analise_com_imagens_da_pasta()
   # elif opcao == '3':
        #return analise_com_upload_manual()
    else:
        print("Op√ß√£o inv√°lida. Executando an√°lise com imagens da pasta...")
        return analise_com_imagens_da_pasta()

# Executar an√°lise
if __name__ == "__main__":
    print("=== TEMPLATE MATCHING AVAN√áADO ===")
    print("Agora com suporte autom√°tico para imagens da pasta template_test_images! üéØ")

    analyzer = menu_avancado()

    if analyzer is not None:
        print("\n‚úÖ An√°lise conclu√≠da com sucesso!")
    else:
        print("\n‚ùå An√°lise n√£o p√¥de ser conclu√≠da.")